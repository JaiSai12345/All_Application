// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urban.DAL.Contexts;

#nullable disable

namespace UrbanPoshAPIApp.Migrations
{
    [DbContext(typeof(UPCDbContext))]
    partial class UPCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Urban.DAL.Models.ServiceCategories", b =>
                {
                    b.Property<int>("service_category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("service_category_id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("service_category_id");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Urban.DAL.Models.ServiceProviders", b =>
                {
                    b.Property<int>("provider_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("provider_id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("experience_years")
                        .HasColumnType("integer");

                    b.Property<decimal>("rating")
                        .HasColumnType("numeric");

                    b.Property<int>("service_category_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("provider_id");

                    b.HasIndex("service_category_id");

                    b.HasIndex("user_id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Urban.DAL.Models.Services", b =>
                {
                    b.Property<int>("service_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("service_id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("duration")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("provider_id")
                        .HasColumnType("integer");

                    b.Property<string>("service_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("service_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("service_id");

                    b.HasIndex("provider_id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Urban.DAL.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("User_Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profile_Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("User_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Urban.DAL.Models.ServiceProviders", b =>
                {
                    b.HasOne("Urban.DAL.Models.ServiceCategories", "serviceCategories")
                        .WithMany("serviceProviders")
                        .HasForeignKey("service_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urban.DAL.Models.User", "users")
                        .WithMany("serviceProviders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serviceCategories");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Urban.DAL.Models.Services", b =>
                {
                    b.HasOne("Urban.DAL.Models.ServiceProviders", "serviceProviders")
                        .WithMany("services")
                        .HasForeignKey("provider_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serviceProviders");
                });

            modelBuilder.Entity("Urban.DAL.Models.ServiceCategories", b =>
                {
                    b.Navigation("serviceProviders");
                });

            modelBuilder.Entity("Urban.DAL.Models.ServiceProviders", b =>
                {
                    b.Navigation("services");
                });

            modelBuilder.Entity("Urban.DAL.Models.User", b =>
                {
                    b.Navigation("serviceProviders");
                });
#pragma warning restore 612, 618
        }
    }
}
